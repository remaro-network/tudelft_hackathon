#!/usr/bin/env python
import sys
import rclpy
import random
import threading
import numpy as np

from rclpy.node import Node

from sensor_msgs.msg import LaserScan
from mavros_wrapper.ardusub_wrapper import *

def laser_scan_cb(msg, ardusub):
    forward_speed = 0.3 # Maximum forward velocity

    # TODO: Do something with the sonar msg in order to make the robot not
    # crash into the walls
    #
    # CHEAT:
    # LaserScan msg definition can be found here: https://docs.ros2.org/latest/api/sensor_msgs/msg/LaserScan.html
    # Before checking the solution provided, check this example:
    # https://github.com/gazebosim/docs/blob/master/citadel/sensors.md#avoid-the-wall

    # Compute the potential vector
    sonar_data = msg
    angles = np.linspace(sonar_data.angle_min, sonar_data.angle_max, num=len(sonar_data.ranges))
    potentials_x = np.multiply(1/np.asarray(sonar_data.ranges)**2, np.cos(angles))
    sum_potentials_x = np.sum(potentials_x)

    print("angle_min: ", sonar_data.angle_min)
    print("angle_max: ", sonar_data.angle_max)
    print("Angles: ", angles)

    sum_potentials_angles = np.sum(np.cos(angles))
    print("Sum of Cosine of Angles: ", sum_potentials_angles)

    potentials_y = np.multiply(1/np.asarray(sonar_data.ranges)**2, np.sin(angles))
    sum_potentials_y = np.sum(potentials_y)

    p = (sum_potentials_x,sum_potentials_y)

    # set some gains
    k_p = 1/sum_potentials_angles
    # k_p = 1/sum_potentials_x
    k_phi = -0.5

    # Function for computing the new velocity vector
    potential_velocity(forward_speed,(p),k_p,k_phi)

def potential_velocity(max_vel,p,K_p,K_phi):
    """
    This function sends velocity commands to ardusub according to 
    the maximum velocity set for the robot 
    and a potential repulsive field generated by an obstacle
    Parameters:

    -max_vel: maximum forward velocity (without obstacles)
    -p: (px,py) values generated by the potential field in the x and y axis, respectively
    -K_p: gain that regulates linear velocity
    -K_phi: gain that regulates angular velocity
    
    """
    p_x,p_y = p
    forward_vel = max_vel - K_p * p_x
    # compute the angle between linear velocity and vy generated by potential obstacles
    yaw_vel = K_phi*np.arctan(float(- K_p * p_y/forward_vel))
        
    # Write velocities in channels
    # The previous values should be between -1 and 1. 
    ardusub.toogle_rc_override(True) # start overriding RC
    ardusub.set_rc_override_channels(forward=forward_vel, yaw = yaw_vel) # set values to override
    print("forward_vel : ",forward_vel)
    print("yaw_vel : ",yaw_vel)

if __name__ == '__main__':
    print("Starting wall avoidance. Let's swim!")

    # Initialize ros node
    rclpy.init(args=sys.argv)

    ardusub = BlueROVArduSubWrapper("ardusub_node")

    thread = threading.Thread(target=rclpy.spin, args=(ardusub, ), daemon=True)
    thread.start()

    # TODO: Set flight mode to MANUAL, STABILIZE or DEPTH HOLD
    service_timer = ardusub.create_rate(2)
    while ardusub.status.mode != "ALT_HOLD":
            ardusub.set_mode("ALT_HOLD")
            service_timer.sleep()
    print("Manual mode selected")

    # TODO: Arm motors
    while ardusub.status.armed == False:
            ardusub.arm_motors(True)
            service_timer.sleep()

    print("Thrusters armed")

    print("Initializing mission")

    # TODO: start publishing on /mavros/rc/override
    ardusub.toogle_rc_override(True)
    ardusub.set_rc_override_channels(throttle=0.0, pitch=0.0, forward=0.01)
    # TODO: start moving forward

    # Sonar subscriber
    laser_subscriber = ardusub.create_subscription(
        LaserScan, '/scan', (lambda msg: laser_scan_cb(msg, ardusub)), 10)

    rate = ardusub.create_rate(2)
    try:
        while rclpy.ok():
            rate.sleep()
    except KeyboardInterrupt:
        pass
    ardusub.arm_motors(False) # better safe than sorry
    ardusub.destroy_node()
    rclpy.shutdown()
